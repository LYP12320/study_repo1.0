聚类算法-DBSCAN
基本概念：
       核心对象：若某个点的密度达到了算法设定的阈值则其为核心点。（即r邻域（半径）内点的数量不小于minPts--阈值）
        （翻译成人话为：以q为原点，r为半径画圆，圆内的点数不小于阈值--minPts，则圆心q为核心对象。）

       ∈-邻域的距离阈值：设定的半径r

       直接可达密度：若某点p在点q的人邻域内，且q是核心点，则p-q直接密度可达。
        （翻译成人话为：以q为原点，r为半径画圆，p点在此圆内，那么p-q直接密度可达）

        密度可达：若有一个点的序列q0、q1、...qk，对任意qi-q(i-1)是直接密度可达的，则称从q0到qk是密度可达，实际上就是直接密度可达的“传播”
         （此句本为人话，不翻译。）


        密度相连：若从某个核心点p出发，点q和点k都是密度可达的，则称点q和点k是密度相连的。
         （p-q密度可达，p-k密度可达则q,k密度相连。）


        边界点：属于某一个类的非核心点，不能再发展下线了。
         （不能以他为核心点找到直接密度可达的点了。）


         噪声点：不属于任何一个类簇的点，从任何一个核心点出发都是密度不可达的。




工作流程：
    大步骤：
        参数D：输入数据集
        参数€：指定半径r
        minpts：密度阈值（圆内至少有几个点）

    小步骤：
        标记所有对象为unvisited;
        DO;
        随机选择一个unvisited对象p;
        标记p为visited;
        if p的€-邻域内至少有minpts个对象：
             创建一个新的簇C1，并把p添加到C1；
             令N为p的€-邻域中的对象的集合
             for N中的每个点p：
                 if p 是unvisoted:
                    标记p为visited；
                    if p 的€-邻域内至少有minpts个对象，则把这些对象添加到N；
                    如果p还不是任何簇的成员，则吧p添加到C1；

            end for;
            输出C1；
        else标记p为噪声；
        until没有被标记为unvisited的对象；


参数选择：
        半径€：可以根据K距离来设定，找突变点。
        K距离：给定数据集p={p(i);i=0、1...n},计算点p(i)到集合D的子集S中所有点之间的距离，距离按照从小到大的顺序排序，d(k)就被成为k-距离。
        （算出所有距离后，按照从小到大的顺序排序，找到突变点即可）

        minpts:k-距离中k的值，一般取小一些，多次尝试


优势：
    不需要指定簇的个数
    可以发现任意形状的簇
    擅长找到离群点（检测任务）
    两个参数就可以。

劣势：
    高维数据有些困难（可以先做降维）
    参数选择困难（参数对结果的影响非常大）
    SKlearn中效率很慢（数据消减策略）

DBSCAN工作流程示意网址：https://www.naftaliharris.com/blog/visualizing-dbscan-clustering




     